/*
    genphen is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    genphen is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with genphen.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.1

#include <stan/model/model_header.hpp>

namespace model_dich_hier_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_dich_hier");
    reader.add_event(56, 54, "end", "model_dich_hier");
    return reader;
}

#include <meta_header.hpp>
 class model_dich_hier : public prob_grad {
private:
    int Z;
    int S_N;
    vector<int> S;
    vector<int> N;
    vector<int> Y;
    vector<int> X;
public:
    model_dich_hier(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_dich_hier(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_dich_hier_namespace::model_dich_hier";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "Z", "int", context__.to_vec());
            Z = int(0);
            vals_i__ = context__.vals_i("Z");
            pos__ = 0;
            Z = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "S_N", "int", context__.to_vec());
            S_N = int(0);
            vals_i__ = context__.vals_i("S_N");
            pos__ = 0;
            S_N = vals_i__[pos__++];
            current_statement_begin__ = 5;
            validate_non_negative_index("S", "Z", Z);
            context__.validate_dims("data initialization", "S", "int", context__.to_vec(Z));
            validate_non_negative_index("S", "Z", Z);
            S = std::vector<int>(Z,int(0));
            vals_i__ = context__.vals_i("S");
            pos__ = 0;
            size_t S_limit_0__ = Z;
            for (size_t i_0__ = 0; i_0__ < S_limit_0__; ++i_0__) {
                S[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 6;
            validate_non_negative_index("N", "Z", Z);
            context__.validate_dims("data initialization", "N", "int", context__.to_vec(Z));
            validate_non_negative_index("N", "Z", Z);
            N = std::vector<int>(Z,int(0));
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            size_t N_limit_0__ = Z;
            for (size_t i_0__ = 0; i_0__ < N_limit_0__; ++i_0__) {
                N[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("Y", "Z", Z);
            context__.validate_dims("data initialization", "Y", "int", context__.to_vec(Z));
            validate_non_negative_index("Y", "Z", Z);
            Y = std::vector<int>(Z,int(0));
            vals_i__ = context__.vals_i("Y");
            pos__ = 0;
            size_t Y_limit_0__ = Z;
            for (size_t i_0__ = 0; i_0__ < Y_limit_0__; ++i_0__) {
                Y[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("X", "Z", Z);
            context__.validate_dims("data initialization", "X", "int", context__.to_vec(Z));
            validate_non_negative_index("X", "Z", Z);
            X = std::vector<int>(Z,int(0));
            vals_i__ = context__.vals_i("X");
            pos__ = 0;
            size_t X_limit_0__ = Z;
            for (size_t i_0__ = 0; i_0__ < X_limit_0__; ++i_0__) {
                X[i_0__] = vals_i__[pos__++];
            }

            // validate, data variables
            current_statement_begin__ = 3;
            current_statement_begin__ = 4;
            current_statement_begin__ = 5;
            current_statement_begin__ = 6;
            current_statement_begin__ = 7;
            current_statement_begin__ = 8;
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 12;
            ++num_params_r__;
            current_statement_begin__ = 13;
            ++num_params_r__;
            current_statement_begin__ = 14;
            ++num_params_r__;
            current_statement_begin__ = 15;
            ++num_params_r__;
            current_statement_begin__ = 16;
            ++num_params_r__;
            current_statement_begin__ = 17;
            ++num_params_r__;
            current_statement_begin__ = 18;
            ++num_params_r__;
            current_statement_begin__ = 19;
            ++num_params_r__;
            current_statement_begin__ = 20;
            validate_non_negative_index("z_beta", "S_N", S_N);
            num_params_r__ += S_N;
            current_statement_begin__ = 21;
            validate_non_negative_index("z_alpha", "S_N", S_N);
            num_params_r__ += S_N;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_dich_hier() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("mu_alpha")))
            throw std::runtime_error("variable mu_alpha missing");
        vals_r__ = context__.vals_r("mu_alpha");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu_alpha", "double", context__.to_vec());
        double mu_alpha(0);
        mu_alpha = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_alpha);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu_alpha: ") + e.what());
        }

        if (!(context__.contains_r("mu_beta")))
            throw std::runtime_error("variable mu_beta missing");
        vals_r__ = context__.vals_r("mu_beta");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu_beta", "double", context__.to_vec());
        double mu_beta(0);
        mu_beta = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu_beta: ") + e.what());
        }

        if (!(context__.contains_r("sigma_alpha")))
            throw std::runtime_error("variable sigma_alpha missing");
        vals_r__ = context__.vals_r("sigma_alpha");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_alpha", "double", context__.to_vec());
        double sigma_alpha(0);
        sigma_alpha = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma_alpha);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_alpha: ") + e.what());
        }

        if (!(context__.contains_r("sigma_beta")))
            throw std::runtime_error("variable sigma_beta missing");
        vals_r__ = context__.vals_r("sigma_beta");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_beta", "double", context__.to_vec());
        double sigma_beta(0);
        sigma_beta = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma_beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_beta: ") + e.what());
        }

        if (!(context__.contains_r("nu_alpha")))
            throw std::runtime_error("variable nu_alpha missing");
        vals_r__ = context__.vals_r("nu_alpha");
        pos__ = 0U;
        context__.validate_dims("initialization", "nu_alpha", "double", context__.to_vec());
        double nu_alpha(0);
        nu_alpha = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(1,nu_alpha);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable nu_alpha: ") + e.what());
        }

        if (!(context__.contains_r("nu_beta")))
            throw std::runtime_error("variable nu_beta missing");
        vals_r__ = context__.vals_r("nu_beta");
        pos__ = 0U;
        context__.validate_dims("initialization", "nu_beta", "double", context__.to_vec());
        double nu_beta(0);
        nu_beta = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(1,nu_beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable nu_beta: ") + e.what());
        }

        if (!(context__.contains_r("tau_alpha")))
            throw std::runtime_error("variable tau_alpha missing");
        vals_r__ = context__.vals_r("tau_alpha");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau_alpha", "double", context__.to_vec());
        double tau_alpha(0);
        tau_alpha = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,tau_alpha);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau_alpha: ") + e.what());
        }

        if (!(context__.contains_r("tau_beta")))
            throw std::runtime_error("variable tau_beta missing");
        vals_r__ = context__.vals_r("tau_beta");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau_beta", "double", context__.to_vec());
        double tau_beta(0);
        tau_beta = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,tau_beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau_beta: ") + e.what());
        }

        if (!(context__.contains_r("z_beta")))
            throw std::runtime_error("variable z_beta missing");
        vals_r__ = context__.vals_r("z_beta");
        pos__ = 0U;
        validate_non_negative_index("z_beta", "S_N", S_N);
        context__.validate_dims("initialization", "z_beta", "double", context__.to_vec(S_N));
        std::vector<double> z_beta(S_N,double(0));
        for (int i0__ = 0U; i0__ < S_N; ++i0__)
            z_beta[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < S_N; ++i0__)
            try {
            writer__.scalar_unconstrain(z_beta[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_beta: ") + e.what());
        }

        if (!(context__.contains_r("z_alpha")))
            throw std::runtime_error("variable z_alpha missing");
        vals_r__ = context__.vals_r("z_alpha");
        pos__ = 0U;
        validate_non_negative_index("z_alpha", "S_N", S_N);
        context__.validate_dims("initialization", "z_alpha", "double", context__.to_vec(S_N));
        std::vector<double> z_alpha(S_N,double(0));
        for (int i0__ = 0U; i0__ < S_N; ++i0__)
            z_alpha[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < S_N; ++i0__)
            try {
            writer__.scalar_unconstrain(z_alpha[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_alpha: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            local_scalar_t__ mu_alpha;
            (void) mu_alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_alpha = in__.scalar_constrain(lp__);
            else
                mu_alpha = in__.scalar_constrain();

            local_scalar_t__ mu_beta;
            (void) mu_beta;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_beta = in__.scalar_constrain(lp__);
            else
                mu_beta = in__.scalar_constrain();

            local_scalar_t__ sigma_alpha;
            (void) sigma_alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_alpha = in__.scalar_lb_constrain(0,lp__);
            else
                sigma_alpha = in__.scalar_lb_constrain(0);

            local_scalar_t__ sigma_beta;
            (void) sigma_beta;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_beta = in__.scalar_lb_constrain(0,lp__);
            else
                sigma_beta = in__.scalar_lb_constrain(0);

            local_scalar_t__ nu_alpha;
            (void) nu_alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                nu_alpha = in__.scalar_lb_constrain(1,lp__);
            else
                nu_alpha = in__.scalar_lb_constrain(1);

            local_scalar_t__ nu_beta;
            (void) nu_beta;  // dummy to suppress unused var warning
            if (jacobian__)
                nu_beta = in__.scalar_lb_constrain(1,lp__);
            else
                nu_beta = in__.scalar_lb_constrain(1);

            local_scalar_t__ tau_alpha;
            (void) tau_alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_alpha = in__.scalar_lb_constrain(0,lp__);
            else
                tau_alpha = in__.scalar_lb_constrain(0);

            local_scalar_t__ tau_beta;
            (void) tau_beta;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_beta = in__.scalar_lb_constrain(0,lp__);
            else
                tau_beta = in__.scalar_lb_constrain(0);

            vector<local_scalar_t__> z_beta;
            size_t dim_z_beta_0__ = S_N;
            z_beta.reserve(dim_z_beta_0__);
            for (size_t k_0__ = 0; k_0__ < dim_z_beta_0__; ++k_0__) {
                if (jacobian__)
                    z_beta.push_back(in__.scalar_constrain(lp__));
                else
                    z_beta.push_back(in__.scalar_constrain());
            }

            vector<local_scalar_t__> z_alpha;
            size_t dim_z_alpha_0__ = S_N;
            z_alpha.reserve(dim_z_alpha_0__);
            for (size_t k_0__ = 0; k_0__ < dim_z_alpha_0__; ++k_0__) {
                if (jacobian__)
                    z_alpha.push_back(in__.scalar_constrain(lp__));
                else
                    z_alpha.push_back(in__.scalar_constrain());
            }


            // transformed parameters
            current_statement_begin__ = 26;
            validate_non_negative_index("alpha", "S_N", S_N);
            vector<local_scalar_t__> alpha(S_N);
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha,DUMMY_VAR__);
            current_statement_begin__ = 27;
            validate_non_negative_index("beta", "S_N", S_N);
            vector<local_scalar_t__> beta(S_N);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta,DUMMY_VAR__);


            current_statement_begin__ = 29;
            for (int s = 1; s <= S_N; ++s) {

                current_statement_begin__ = 30;
                stan::model::assign(alpha, 
                            stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                            (mu_alpha + ((get_base1(z_alpha,s,"z_alpha",1) * sigma_alpha) / stan::math::sqrt(tau_alpha))), 
                            "assigning variable alpha");
                current_statement_begin__ = 31;
                stan::model::assign(beta, 
                            stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                            (mu_beta + ((get_base1(z_beta,s,"z_beta",1) * sigma_beta) / stan::math::sqrt(tau_beta))), 
                            "assigning variable beta");
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < S_N; ++i0__) {
                if (stan::math::is_uninitialized(alpha[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: alpha" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < S_N; ++i0__) {
                if (stan::math::is_uninitialized(beta[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 26;
            current_statement_begin__ = 27;

            // model body

            current_statement_begin__ = 36;
            for (int i = 1; i <= Z; ++i) {

                current_statement_begin__ = 37;
                lp_accum__.add(binomial_logit_log<propto__>(get_base1(Y,i,"Y",1), get_base1(N,i,"N",1), (get_base1(alpha,get_base1(S,i,"S",1),"alpha",1) + (get_base1(beta,get_base1(S,i,"S",1),"beta",1) * get_base1(X,i,"X",1)))));
            }
            current_statement_begin__ = 40;
            lp_accum__.add(student_t_log<propto__>(mu_alpha, 1, 0, 100));
            current_statement_begin__ = 41;
            lp_accum__.add(student_t_log<propto__>(mu_beta, 1, 0, 10));
            current_statement_begin__ = 43;
            lp_accum__.add(gamma_log<propto__>(nu_alpha, 2, 0.10000000000000001));
            current_statement_begin__ = 44;
            lp_accum__.add(gamma_log<propto__>(nu_beta, 2, 0.10000000000000001));
            current_statement_begin__ = 46;
            lp_accum__.add(cauchy_log<propto__>(sigma_alpha, 0, 5));
            current_statement_begin__ = 47;
            lp_accum__.add(cauchy_log<propto__>(sigma_beta, 0, 5));
            current_statement_begin__ = 49;
            lp_accum__.add(normal_log<propto__>(z_alpha, 0, 1));
            current_statement_begin__ = 50;
            lp_accum__.add(normal_log<propto__>(z_beta, 0, 1));
            current_statement_begin__ = 52;
            lp_accum__.add(gamma_log<propto__>(tau_alpha, (nu_alpha / 2), (nu_alpha / 2)));
            current_statement_begin__ = 53;
            lp_accum__.add(gamma_log<propto__>(tau_beta, (nu_beta / 2), (nu_beta / 2)));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mu_alpha");
        names__.push_back("mu_beta");
        names__.push_back("sigma_alpha");
        names__.push_back("sigma_beta");
        names__.push_back("nu_alpha");
        names__.push_back("nu_beta");
        names__.push_back("tau_alpha");
        names__.push_back("tau_beta");
        names__.push_back("z_beta");
        names__.push_back("z_alpha");
        names__.push_back("alpha");
        names__.push_back("beta");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S_N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S_N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S_N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S_N);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_dich_hier_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double mu_alpha = in__.scalar_constrain();
        double mu_beta = in__.scalar_constrain();
        double sigma_alpha = in__.scalar_lb_constrain(0);
        double sigma_beta = in__.scalar_lb_constrain(0);
        double nu_alpha = in__.scalar_lb_constrain(1);
        double nu_beta = in__.scalar_lb_constrain(1);
        double tau_alpha = in__.scalar_lb_constrain(0);
        double tau_beta = in__.scalar_lb_constrain(0);
        vector<double> z_beta;
        size_t dim_z_beta_0__ = S_N;
        for (size_t k_0__ = 0; k_0__ < dim_z_beta_0__; ++k_0__) {
            z_beta.push_back(in__.scalar_constrain());
        }
        vector<double> z_alpha;
        size_t dim_z_alpha_0__ = S_N;
        for (size_t k_0__ = 0; k_0__ < dim_z_alpha_0__; ++k_0__) {
            z_alpha.push_back(in__.scalar_constrain());
        }
        vars__.push_back(mu_alpha);
        vars__.push_back(mu_beta);
        vars__.push_back(sigma_alpha);
        vars__.push_back(sigma_beta);
        vars__.push_back(nu_alpha);
        vars__.push_back(nu_beta);
        vars__.push_back(tau_alpha);
        vars__.push_back(tau_beta);
            for (int k_0__ = 0; k_0__ < S_N; ++k_0__) {
            vars__.push_back(z_beta[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < S_N; ++k_0__) {
            vars__.push_back(z_alpha[k_0__]);
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 26;
            validate_non_negative_index("alpha", "S_N", S_N);
            vector<local_scalar_t__> alpha(S_N);
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha,DUMMY_VAR__);
            current_statement_begin__ = 27;
            validate_non_negative_index("beta", "S_N", S_N);
            vector<local_scalar_t__> beta(S_N);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta,DUMMY_VAR__);


            current_statement_begin__ = 29;
            for (int s = 1; s <= S_N; ++s) {

                current_statement_begin__ = 30;
                stan::model::assign(alpha, 
                            stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                            (mu_alpha + ((get_base1(z_alpha,s,"z_alpha",1) * sigma_alpha) / stan::math::sqrt(tau_alpha))), 
                            "assigning variable alpha");
                current_statement_begin__ = 31;
                stan::model::assign(beta, 
                            stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                            (mu_beta + ((get_base1(z_beta,s,"z_beta",1) * sigma_beta) / stan::math::sqrt(tau_beta))), 
                            "assigning variable beta");
            }

            // validate transformed parameters
            current_statement_begin__ = 26;
            current_statement_begin__ = 27;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_0__ = 0; k_0__ < S_N; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < S_N; ++k_0__) {
            vars__.push_back(beta[k_0__]);
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_dich_hier";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_beta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_beta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "nu_alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "nu_beta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_beta";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= S_N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= S_N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= S_N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= S_N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_beta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_beta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "nu_alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "nu_beta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_beta";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= S_N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= S_N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= S_N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= S_N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef model_dich_hier_namespace::model_dich_hier stan_model;


#endif
