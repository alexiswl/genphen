%\VignetteIndexEntry{genphen overview}

\documentclass[a4paper, 11pt]{article}
\usepackage[utf8]{inputenc}
\let\chapter\section
\usepackage[lined]{algorithm2e}

\usepackage[numbers]{natbib}
\bibliographystyle{plainnat}

\usepackage[english]{babel}
\selectlanguage{english}

\usepackage{graphicx}
\usepackage{placeins}
\usepackage{amsmath}
\usepackage{amscd}
\usepackage{ifthen}
\usepackage{float}
\usepackage{subfig}

\usepackage{lscape}

\usepackage{parskip}
\usepackage{multirow}
\usepackage{todonotes}
\usepackage{color}
\usepackage{colortbl}
\definecolor{hellgrau}{rgb}{0.9,0.9,0.9}
\definecolor{dunkelgrau}{rgb}{0.8,0.8,0.8}

\usepackage{hyperref}
% remove ref boxes
%\usepackage[hidelinks]{hyperref}

%add-on renews
\renewcommand\topfraction{0.85}
\renewcommand\bottomfraction{0.85}
\renewcommand\textfraction{0.1}
\renewcommand\floatpagefraction{0.85}

%confusion matrix
\newcommand\confusion[1]{
\fbox{\lower0.75cm
\vbox to 0.5cm{\vfil
\hbox to 0.5cm{\hfil\parbox{1cm}{#1}}
\vfil}%
}%
}

\setlength\floatsep{1.25\baselineskip plus 3pt minus 2pt}
\setlength\textfloatsep{1.25\baselineskip plus 3pt minus 2pt}
\setlength\intextsep{1.25\baselineskip plus 3pt minus 2 pt}
\setlength{\parindent}{0pt}

\begin{document}
\SweaveOpts{concordance=TRUE}



\title{Tutorial on using \texttt{genphen}}
\author{Simo Kitanovski, \\
Bioinformatics, University of Duisburg-Essen, \\
Essen, Germany}
\maketitle

\tableofcontents

This tutorial gives you some of the technical background underlying
\texttt{genphen} that should enable you to understand and use this tool.

\section{\texttt{genphen} quantifies genotype-phenotype associations}
Genome wide association studies (GWAS) have become an important tool to
understand the association between genotypes and phenotypes. With GWAS we try
to answer questions such as ``what are the genotypes in the human genome which
predispose to a disease?'' or ``what are the genotypes in certain strains of
mice which confer resistance against a specific virus?''. The advances in high-
throughput sequencing technology have provided massive genetic data and thus
potentially countless applications of genotype-phenotype association studies.
The genotype can be a set of single nucleotide polymorphisms (SNPs) or a set of
single amino acid polymorphisms (SAAPs) identified in a group of individuals,
whereas the phenotype can be any continuous or discrete individual quantity or
characteristics.

To conduct GWAS, frequentist statistical methods are typically used, relying on
simple and often inadequate methods to capture the complex and potentially non-
linear genotype-phenotype association. Moreover, these methods often use P-
values to quantify the strength of association, bringing with them a set of
disadvantages, some of which include poor interpretation, difficulty to compare
between different studies, as well as massive multiple hypothesis problems.

With \texttt{genphen} we provide a hybrid method which rips the benefits of
sophisticated statistical learning approaches such as random forest (RF) and
support vector machine (SVM) to capture complex genotype-phenotype associations,
on the one hand, and Bayesian inference on the other hand, to accurately
quantify the strength of association using models consistent with the data.
The results of \texttt{genphen} are multiple association scores for each
genotype. Visualizing these scores in combination presents to the researcher a
guide to selecting the most promising association.

\section{Methods}
\label{sec:methods}
\subsection{Input}
Two data types are necessary to perform a genetic association study:
\begin{itemize}
\item genotype data (e.g. set 1000 SNPs found along the aligned genomes of 10
individuals)
\item phenotype data (experimental measurement made for each individual such as
body mass, immune response, survival, case-control, etc.)
\end{itemize}

More generally, we can think of the genotype data as a character matrix with
dimensions $N\times M$, whereby the $M$ columns represent different SNPs or
SAAPs, and the $N$ rows represent different individuals or sequences for which
we have measures some phenotype. On the other hand, we can think of the
phenotype as a numerical vector of length $N$, where each phenotype corresponds
to a particular individual.

% \subsubsection{Continuous phenotypes}
% Given a continuous phenotype and a genotype composed of two genetic states
% (e.g. SNP with two genetic states (e.g. alleles) $x$ and $y$), we want test
% whether there exists a significant difference in the observed phenotype between
% the two genetic states, with a null hypothesis $H_0: x - y = 0$ and alternative
% hypothesis $H_1: = x - y \neq 0$, analogous to a t-test. With \texttt{genphen},
% we approach this problem as follows:

\subsection{Metrics}
\paragraph{Classification accuracy($CA$)}
$CA$ measures the degree of accuracy with which one can classify (predict) the
alleles of an SNP from the phenotype measurements. If there exists a strong
association between a particular SNP and the phenotype, one should be able to
build a statistical model which accurately classifies the two alleles of that
SNP solely from the phenotype data ($CA \approx 1$). Otherwise, the
classification accuracy of statistical model should be approximately similar to
that of simple guessing ($CA \approx 0.5$).

To estimate a robust $CA$ estimate, \texttt{genphen} uses cross-validation (CV)
to estimate a distribution of possible $CAs$. During the CV procedure a subset
(66\%) of the genotype-phenotype data is selected at random for training the
classifier, followed by testing based on the remaining data. The following
confusion matrix represents the result of one CV step:
\newcommand{\M}{\textmd}
\newcommand{\B}{$\bullet$}
\newcommand{\MC}{\multicolumn}
\newcommand{\MR}{\multirow}
\setlength{\doublerulesep}{.9\arrayrulewidth}
\addtolength{\tabcolsep}{2pt}
\begin{table}[H] \centering
\begin{tabular}%
{|cl|c|c|}
\hline
&   &  \MC{2}{c||}{\textbf{Real}} \\
&   &  \textbf{$allele_1$}  &  \textbf{$allele_2$} \\
\hline\hline
& \textbf{$allele_1$} & a & b\\
\cline{2-4}
\MR{-2}{*}{\textbf{Predicted}} & \textbf{$allele_2$} & c & d\\
\hline
\end{tabular}
\caption{Confusion matrix resulting from a classification analysis}
\label{tab:t0}
\end{table}
The CA of the cross-validation step $i$ is then estimated as:
\begin{gather*}
CA_i = \frac{a+d}{a+b+c+d}
\end{gather*}
The final $CA$ after 1000 CV steps is then estimated as:
\begin{gather*}
CA = \frac{1}{1000} \sum_{i=1}^{1000} CA_{i}
\end{gather*}
In addition to estimating $CA$, the distribution of $CAs$ enables us to also
compute the 95\% highest density interval (95\% HDI) of CA. The mutations with
$CA \approx 1$, with narrow HDI of CA are the most promising ones.

The metric $CA$ has the following advantages:
\begin{itemize}
\item simple to estimate
\item simple to interpret (bound between 0 and 1)
\item simple to compare across studies
\item one can have high CA even for small effects
\end{itemize}

\paragraph{Cohen's $\kappa$ statistic}
There is one pitfall where the $CA$ estimate can be truly misleading, and this
is the case when the analyzed SNP is composed of unevenly represented genetic
states (alleles). For instance, the allele A of a given SNP is found in 90\%
of the individuals, while the other allele T in only 10\%. Such an uneven
composition of the alleles can lead to misleading results, i.e. even without
learning the algorithm can produce a high $CA \approx 0.9$ simply by constantly
predicting only the dominant label. The Cohen's $\kappa$ statistics can be used
to estimate how much better the observed $CA$ is, compared to the classification
accuracy expected by chance ($CA_{exp}$). To compute the $\kappa$ statistics,
the confusion matrix shown before in Table \hyperref[tab:t0]{1} is used:
\begin{gather*}
\kappa =  \frac{CA - CA_{exp}}
{1 - CA_{exp}} \\
CA_{exp} = \frac{a+b}{a+b+c+d} \cdot \frac{a+c}{a+b+c+d} +
\frac{c+d}{a+b+c+d} \cdot \frac{b+d}{a+b+c+d} \\
\end{gather*}
The $\kappa$ statistics is a quality metric, which is to be used together with
$CA$. Cohen defines the following meaningful $\kappa$ intervals: [$\kappa$<0]:
``no agreement'', [0.0-0.2]: ``slight agreement'', [0.2-0.4]: ``fair agreement''
, [0.4-0.6]: ``moderate agreement'', [0.6-0.8]: ``substantial agreement'' and
[0.8-1.0]: ``almost perfect agreement''. Similarly to the estimation of $CA$,
the final Cohen's $\kappa$ is also estimated by averaging the individual
$\kappa$ scores computed for each step of the CV. Here too,
95\% HDIs are estimated.

\paragraph{Cohen's $d$ effect size}
For continuous phenotypes we compute the Cohen's $d$ for each genotype-phenotype
pair. Cohen's $d$ estimates which are significantly greater or smaller than 0,
indicate that there is a large difference in the measured phenotype between the
two genetic states of the specific genotype. Cohen (1992) defines thresholds
which define the magnitude of the effects as: |$d$|<0.2 ``negligible'',
|$d$|<0.5 ``small'', |$d$|<0.8 ``medium'', otherwise ``large''. The Cohen's $d$
is computed as follows:
\begin{gather*}
d = \frac{\mu_1 - \mu_2}{\sqrt{\frac{(n_1 - 1) * \sigma_1 +
(n_2 - 1) * \sigma_2}{n_1 + n_2 - 2}}}
\end{gather*}
where $\mu_1$, $\mu_2$ and $\sigma_1$, $\sigma_2$ represent the mean and the
standard deviations of the phenotypes in the two genetic states of the genotype,
while $n_1$ and $n_2$ represent the sample sizes of the two genetic states of
the genotype.

\texttt{genphen} uses the following Bayesian inference models designed in STAN
\footnote{Stan Development Team. 2017. Stan Modeling Language Users Guide and
Reference Manual, Version 2.17.0. http://mc-stan.org}, to estimate each of the
parameters in the Cohen's $d$ equation from the data:
\begin{gather*}
Y_{ij} \sim T(\nu, \mu_{j}, \sigma_{j}) \\
\mu_{j} \sim N(\hat{\mu}_{j}, \hat{\sigma}_{j}) \\
\sigma_{j} \sim U(\hat{\sigma}_{j}/100, \hat{\sigma}_{j}*100) \\
\nu \sim Gamma(2.0, 0.1)
\end{gather*}
where $i$ and $j$ index the different observations and alleles of a given SNP,
respectively. $Y$ is the phenotype vector; $\mu$, $\sigma$ and $\nu$ are the
mean, standard deviation and degrees of freedom parameters of the T-distribution
which is used to model the phenotype observed in each allele; $\hat{\sigma}$ and
$\hat{\mu}$ are the empirically estimated mean and standard deviations of the
phenotype in each allele which are used to setup the broad priors for $\mu$ and
$\sigma$.

For each parameter we estimate a complete posterior distribution with MCMC
sampling implemented in \texttt{rstan}. Therefore, by plugging in the entire
posterior distributions of the parameters into the Cohen's $d$ equation, we
estimate a complete posterior distribution for $d$ as well. This also allows us
to compute the corresponding 95\% HDI of $d$. A complete description of the
hierarchical model is provided in Krushke, 2013) \footnote{Kruschke, John K.
"Bayesian estimation supersedes the t test."Journal of Experimental Psychology:
General 142.2 (2013): 573}.

\paragraph{Absolute effect size ($a$)}
For dichotomous phenotypes, \texttt{genphen} simply computes the absolute
difference (also known as contrast $a$) between the phenotypes of any two
genetic states of each polymorphism as follows:
\begin{gather*}
a = p_1 - p_2
\end{gather*}
where $p_1$, $p_2$ represent the proportion of "successes" in a given number of
observed trials in the two genetic states of the given SNP/SAAP. Similar to the
case of having a continuous phenotype, \texttt{genphen} uses a Bayesian
inference models designed in STAN to estimate each of the parameters in the
equation above from the data:
\begin{gather*}
Y_{ij} \sim Bern(p_{j}) \\
p_{j} \sim Beta(1/2, 1/2)
\end{gather*}
where $i$ and $j$ index the different observations and alleles of a given SNP,
respectively. $Y$ is the phenotype vector; $p$, is the probability parameter of
the Bernoulli distribution which is used to model the dichotomous phenotype data
as a set of sucesses in a set of trials observed each allele; The prior of $p$
is a Beta distribution whose two shape parameters are fixed at 0.5 (Jeffrey's
prior).

Plugging in the estimated posterior distributions of $p$ into the equation above
allows us to compute the mean $a$ point estimate and its 95\% HDI.

\section{Case studies}
\subsection{Case study I: Association between SNPs and a *continuous*
phenotype}
\label{sec:case1}

In the first case study, we show a typical genotype-phenotype analysis, whereby
the genotype is a protein sequence alignment composed of 6 sites and 120
individuals (sequences), and a continuous phenotype measured for each of the
individuals.

<<echo=F, include=T, results=hide>>=
require(genphen)
require(ggplot2)
require(knitr)
require(ggrepel)
require(reshape2)

# genotype inputs:
data(genotype.saap)
# phenotype inputs:
data(phenotype.saap)

# run genphen
c.out <- runGenphen(genotype = genotype.saap[, 80:85],
                    phenotype = phenotype.saap,
                    phenotype.type = "continuous",
                    mcmc.chains = 2,
                    mcmc.iterations = 2000,
                    mcmc.warmup = 500,
                    mcmc.cores = 2,
                    hdi.level = 0.95,
                    with.ppc = TRUE,
                    stat.learn.method = "rf")
@

First we show an overview of the distribution of the phenotype across each of
the 6 studied polymorphic sites in the sequence alignment, and the underlying
genotype states. \texttt{genphen} will list the mutations found at each size,
followed by quantification fo the association strength as explained in
\ref{sec:methods}.

\begin{figure}[H]
\centering
<<echo=F, include=T, results=hide, fig=T, width=8, height=4>>=
df <- data.frame(genotype.saap[, 80:85], stringsAsFactors = F)
df$phenotype <- phenotype.saap
df <- melt(data = df, id.vars = "phenotype")
colnames(df) <- c("phenotype", "site", "genotype")
df$site <- gsub(pattern = "X", replacement = '', x = df$site)

ggplot(data = df)+
  facet_wrap(facets = ~site, ncol = 6, scales = "free_x")+
  geom_violin(aes(x = genotype, y = phenotype))+
  geom_point(aes(x = genotype, y = phenotype, col = genotype), size = 1,
             shape = 21, position = position_jitterdodge(jitter.width = 0.2,
                                                         jitter.height = 0.1,
                                                         dodge.width = 0.5))+
  scale_color_discrete(name = "genotype")+
  theme_bw(base_size = 16)+
  theme(legend.position="none")
@
\end{figure}

A typical way of visualizing the \texttt{genphen} results is with the following
plot where each point represents a polymorphism (here SAAP) plotted according
to x=classification accuracy ($CA$), y=Cohen's $d$, color=Cohen's $\kappa$. The
most promising SAAPs have CA and $\kappa$ close to 1, with Cohen's $d$ estimate
whose 95\% highest density interval (HDI) does not overlap with the null effect
(dashed line in figure: $d = 0$). The labels indicate the MSA site number,
followed by the type of the polymorphism.

\begin{figure}[H]
\centering
<<echo=F, include=T, results=hide, fig=T, width=8, height=6>>=
c.out$scores$label <- paste(c.out$scores$site, c.out$scores$mutation, sep = ':')
ggplot(data = c.out$scores)+
  geom_errorbar(aes(x = ca, ymin = cohens.d.L, ymax = cohens.d.H))+
  geom_point(aes(x = ca, y = cohens.d, fill = kappa), shape = 21, size = 4)+
  scale_fill_gradientn(colours = terrain.colors(10), limits = c(0, 1))+
  geom_text_repel(aes(x = ca, y = cohens.d, label = label), size = 4)+
  theme_bw(base_size = 16)+
  xlab(label = "CA")+
  ylab(label = "Cohen's d (with 95% HDI)")+
  scale_x_continuous(limits = c(0, 1))+
  geom_hline(yintercept = 0, linetype = "dashed")
@
\end{figure}

Next, we want to check the validity our Bayesian inference model by inspecting
the two \texttt{genphen} outputs, namely the outputs named convergence and ppc.
\begin{itemize}
\item convergence - the convergence output contains information the markov chain
monte carlo (MCMC) simulation done with R package rstan such as potential scale
reduction factor (Rhat) or effective sampling size (ESS), including potential
convergence issues (divergences, tree depth exceeded warnings, etc.) provided
by the rstan package. Small sample size of specific alleles (of a site) are
often the cause of such warnings, which are then reported for the the alleles
of that site.

<<echo=F, include=T>>=
kable(c.out$convergence[, 1:7], align = "c", digits = 2)
@

<<echo=F, include=T>>=
kable(c.out$convergence[, c(1:3, 8:9)], align = "c", digits = 2)
@

\item ppc - the posterior predictive check (ppc) output, tests the validity of
the model by inspecting its parameters using the following procedure: 1) we use
the estimated posterior distribution of each parameter (parameters describing
the distribution of the phenotype associated with a given allele of a SNP) to
simulate new data; 2) therefore, we obtain a distribution of simulated data
points which we can compare with the observed (real) distribution. If the model
is suitable, the two distributions should have a high overlap, else our model
is not suitable. There are two approaches test this: a) we can visualize the
distribution of the simulated and real phenotype and check whether they
overlap each other; b) we quantify the overlap between the distribution of the
simulated and real phenotype using the Bhattacharyya coefficient (BC)
\footnote{\url{https://en.wikipedia.org/wiki/Bhattacharyya_distance}}, with
$BC = 0$ representing no overlap and $BC = 1$ a complete overlap. Both are
shown in the figure below.

\begin{figure}[H]
\centering
<<echo=F, include=T, results=hide, fig=T, width=8, height=4>>=
ppc <- c.out$ppc
ggplot(data = ppc)+
  facet_wrap(facets = ~site, scales = "free_x")+
  geom_errorbar(aes(x = g.i,ymin = sim.mu.L,ymax = sim.mu.H), col = "blue")+
  geom_errorbar(aes(x = g.i,ymin = real.mu.L,ymax = real.mu.H),
                col = "orange", linetype = "dotdash")+
  geom_point(aes(x = g.i, y = sim.mu), col = "blue")+
  geom_point(aes(x = g.i, y = real.mu), col = "orange")+
  geom_text(aes(x = g.i, y = sim.mu.H + 0.1,
                label = round(x = b.coef, digits = 2)))+
  theme_bw(base_size = 16)+
  xlab(label = "Genotypes")+
  ylab(label = "Phenotype (with 95% HDI)")+
  ggtitle(label = "Posterior predictive check: orange = real, blue = ppc")
@
\end{figure}
\end{itemize}

\subsection{Case study II: Association between SNPs and a *dichotomous*
phenotype}
\label{sec:case2}

In the second case study we show you how to use \texttt{genphen} in case the
phenotype is of dichotomous type. The genotype input is a protein sequence
alignment composed of 12 sites and 120 individuals (sequences), and the
phenotype is a vector of 120 dichotomous values measured for each individual.

<<echo=F, include=T, results=hide>>=
# genotype inputs:
data(genotype.saap)
# phenotype inputs:
data(dichotomous.phenotype.saap)

# run genphen
d.out <- runGenphen(genotype = genotype.saap[, 68:79],
                    phenotype = dichotomous.phenotype.saap,
                    phenotype.type = "dichotomous",
                    mcmc.chains = 2,
                    mcmc.iterations = 2000,
                    mcmc.warmup = 500,
                    mcmc.cores = 2,
                    hdi.level = 0.95,
                    with.ppc = TRUE,
                    stat.learn.method = "rf")
@

First we show an overview of the distribution of the phenotype across each of
the 12 studied polymorphic sites in the sequence alignment, and the underlying
genotype states. \texttt{genphen} will list the mutations found at each size,
followed by quantification fo the association strength as explained in
\ref{sec:methods}.

\begin{figure}[H]
\centering
<<echo=F, include=T, results=hide, fig=T, width=8, height=6>>=
df <- data.frame(genotype.saap[, 68:79], stringsAsFactors = F)
df$phenotype <- dichotomous.phenotype.saap
df <- melt(data = df, id.vars = "phenotype")
colnames(df) <- c("phenotype", "site", "genotype")
df$site <- gsub(pattern = "X", replacement = '', x = df$site)

ggplot(data = df)+
  facet_wrap(facets = ~site, ncol = 6, scales = "free_x")+
  geom_point(aes(x = genotype, y = phenotype, col = genotype), size = 1,
             shape = 21, position = position_jitterdodge(jitter.width = 0.2,
                                                         jitter.height = 0.1,
                                                         dodge.width = 0.5))+
  scale_color_discrete(name = "genotype")+
  theme_bw(base_size = 16)+
  theme(legend.position="none")
@
\end{figure}

A typical way of visualizing the \texttt{genphen} results is with the following
plot where each point represents a polymorphism (here SAAP) plotted according
to x=classification accuracy ($CA$), y=absolute $d$ (with error bars 95\% HDI),
color=Cohen's $\kappa$. The most promising SAAPs have CA and $\kappa \approx 1$,
with absolute $d$ estimate whose 95\% highest density interval (HDI) does not
overlap with the null effect ($d \neq 0$). The labels indicate the MSA site
number, followed by the type of the polymorphism.

\begin{figure}[H]
\centering
<<echo=F, include=T, results=hide, fig=T, width=8, height=6>>=
d.out$scores$label <- paste(d.out$scores$site, d.out$scores$mutation, sep = ':')
ggplot(data = d.out$scores)+
  geom_errorbar(aes(x = ca, ymin = absolute.d.L, ymax = absolute.d.H))+
  geom_point(aes(x = ca, y = absolute.d, fill = kappa), shape = 21, size = 4)+
  scale_fill_gradientn(colours = terrain.colors(10), limits = c(0, 1))+
  geom_text_repel(aes(x = ca, y = absolute.d, label = label), size = 4)+
  theme_bw(base_size = 16)+
  xlab(label = "CA")+
    ylab(label = "Absolute d (with 95% HDI)")+
  scale_x_continuous(limits = c(0, 1))+
  geom_hline(yintercept = 0, linetype = "dashed")
@
\end{figure}

Next, we want to check the validity our Bayesian inference model by inspecting
the two \texttt{genphen} outputs, namely the outputs named convergence and ppc.
A similar analysis was performed and described in \ref{sec:case1}.
\begin{itemize}
\item convergence

<<echo=F, include=T>>=
kable(d.out$convergence[, 1:7], align = "c", digits = 2)
@

<<echo=F, include=T>>=
kable(d.out$convergence[, c(1:3, 6:7)], align = "c", digits = 2)
@

\item ppc

\begin{figure}[H]
\centering
<<echo=F, include=T, results=hide, fig=T, width=8, height=4>>=
ppc <- d.out$ppc
ggplot(data = ppc)+
  facet_wrap(facets = ~site, scales = "free_x")+
  geom_errorbar(aes(x = g.i,ymin = sim.mu.L,ymax = sim.mu.H), col = "blue")+
  geom_errorbar(aes(x = g.i,ymin = real.mu.L,ymax = real.mu.H),
                col = "orange", linetype = "dotdash")+
  geom_point(aes(x = g.i, y = sim.mu), col = "blue")+
  geom_point(aes(x = g.i, y = real.mu), col = "orange")+
  geom_text(aes(x = g.i, y = sim.mu.H + 0.1,
                label = round(x = b.coef, digits = 2)))+
  theme_bw(base_size = 16)+
  xlab(label = "Genotypes")+
  ylab(label = "Phenotype (error bars = 95% HDI)")+
  ggtitle(label = "Posterior predictive check: orange = real, blue = ppc")
@
\end{figure}
\end{itemize}


\end{document}
